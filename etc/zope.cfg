# Zope
# ====
#
# Settings for the Zope application server and database, which we use to run
# the Plone content management system.

# Zope Instance
# -------------
#
# Regular, operational instance of Zope.
[zope]
recipe = plone.recipe.zope2instance
zserver-threads       = 12
debug-mode            = off
environment-vars      = TZ UTC
http-address          = ${ports:zope}
ip-address            = ${hosts:zope}
password              = admin
shared-blob           = on
user                  = ${:username}:${:password}
username              = admin
verbose-security      = off
zeo-address           = ${ports:zeo}
zeo-client            = on
zeo-client-cache-size = 300MB
zodb-cache-size       = 12000
# Note that <clock-server> doesn't seem to be supported in Plone 5.2+Zope 4.whatever
# zope-conf-additional  =
#     <clock-server>
#         method /edrn/@@ingestRDF
#         period 86400
#         host localhost
#         user ${:username}
#         password ${:password}
#     </clock-server>
# We may have to trigger ingests remotely, perhaps from a central source like JPL.
eggs =
    pillow
    Plone
    ${plone-policies:eggs}


# Zope Debugging Instance
# -----------------------
#
# An instance of Zope specifically for development.
[zope-debug]
<= zope
debug-mode           = on
effective-user       =
http-address         = ${ports:zope-debug}
ip-address           =
verbose-security     = on
zeo-client           = off
zope-conf-additional =


# Zope Enterprise Objects
# -----------------------
#
# ZEO is the database server for Zope.  It's used operationally for
# performance and to allow backups/backing during operations.  In
# development, Zope runs the database directly.
[zeo]
recipe = plone.recipe.zeoserver
zeo-address = ${hosts:zeo}:${ports:zeo}


# Zope Backup/Restore
# -------------------
#
# Backup & restore scripts for Zope & ZEO
[backup]
recipe = collective.recipe.backup
blob_storage = ${buildout:directory}/var/blobstorage


# Omelette
# --------
#
# Greppable, explorable Python source code
[omelette]
recipe = collective.recipe.omelette
eggs =
    ${zope:eggs}
    ${eggs-list:eggs}


# Test
# ----
#
# Test runner for Python components.
[test]
recipe = collective.xmltestreport
eggs =
    ${eggs-list:eggs}
    Pillow
    plone.testing
    plone.app.testing
    plone.app.robotframework
    unittest2
    plone.app.upgrade
defaults = ['--auto-color', '--auto-progress', '--verbose']


# Python
# ------
#
# Generation of a Python interpreter with all the Zope eggs "baked in"
[python]
recipe = zc.recipe.egg:scripts
interpreter = python
scripts =
    python
    zodbbrowser
eggs =
    zodbbrowser
    ${test:eggs}


# Project Eggs List
# -----------------
#
# What eggs are being developed in this project.
[eggs-list]
recipe = mr.scripty
eggs = return u'\n'.join(self.buildout['sources'].keys())


# Repozo
# ------
#
# The plone.recipe.zeoserver recipe generates a repozo script so you can work
# with ZODB backups.  But you need to do that when you're developing and
# running Zope standalone without a ZEO server.  The
# plone.recipe.zope2instance recipe claims it generated a repozo script (back
# in version 0.3) but it definitely doesn't now.  So, we use this little
# recipe to generate one.
[repozo]
recipe = zc.recipe.egg
eggs = ZODB3
scripts = repozo
