# Taskfile
# ========
#
# Convenient things to run. Depends on https://taskfile.dev/

---

env:
    ALLOWED_HOSTS: "*"
    BEDROCK_ACCESS_KEY: ""
    BEDROCK_SECRET_KEY: ""
    DATABASE_URL: "postgresql://:@/edrn"
    BASE_URL: "http://localhost:6468/"
    EDRN_DATA_DIR: "{{.HOME}}/dockerdata/renaissance"
    jpl_ipv4: "172.16.16.10"
    LDAP_BIND_PASSWORD: "{{.edrn_service_password}}"
    LDAP_URI: "ldaps://localhost:1636"
    p5_media_dir: "/Users/kelly/P6/media"
    p5_sql: "/Users/kelly/P6/edrn.sql.bz2"
    port: 6468
    python: "python3.13"

tasks:
    clean:
        desc: "P5 Python virtual environment destruction"
        summary: "Completely removes the Python venv used by P5."
        preconditions:
            -   test -d .venv
        cmds:
            -   rm -rf .venv

    venv:
        desc: "P5 Python virtual environment"
        summary: "Creates the Python venv for P5 by running `pip install` on each src component."
        sources:
            -   Taskfile.yaml
            -   src/edrn.collabgroups/setup.cfg
            -   src/edrn.metrics/setup.cfg
            -   src/edrn.theme/setup.cfg
            -   src/edrnsite.content/setup.cfg
            -   src/edrnsite.controls/setup.cfg
            -   src/edrnsite.ploneimport/setup.cfg
            -   src/edrnsite.policy/setup.cfg
            -   src/edrnsite.search/setup.cfg
            -   src/edrnsite.streams/setup.cfg
            -   src/edrnsite.test/setup.cfg
            -   src/eke.biomarkers/setup.cfg
            -   src/eke.geocoding/setup.cfg
            -   src/eke.knowledge/setup.cfg
        generates:
            -   .venv/**
        cmds:
            -   "rm -rf .venv"
            -   "{{.python}} -m venv .venv"
            # Curiously, we get different behavior between `python -m pip install` and `pip install`.
            # The former doesn't install packages' scripts, but the latter does. We need the scripts.
            -   ".venv/bin/pip install --quiet --upgrade setuptools pip wheel build"
            -   ".venv/bin/pip install --editable 'src/eke.geocoding[dev]'"
            -   ".venv/bin/pip install --editable 'src/edrnsite.streams[dev]'"
            -   ".venv/bin/pip install --editable 'src/edrnsite.controls[dev]'"
            -   ".venv/bin/pip install --editable 'src/edrnsite.content[dev]'"
            -   ".venv/bin/pip install --editable 'src/edrn.collabgroups[dev]'"
            -   ".venv/bin/pip install --editable 'src/eke.knowledge[dev]'"
            -   ".venv/bin/pip install --editable 'src/eke.biomarkers[dev]'"
            -   ".venv/bin/pip install --editable 'src/edrnsite.search[dev]'"
            -   ".venv/bin/pip install --editable 'src/edrn.theme[dev]'"
            -   ".venv/bin/pip install --editable 'src/edrnsite.ploneimport[dev]'"
            -   ".venv/bin/pip install --editable 'src/edrn.metrics[dev]'"
            -   ".venv/bin/pip install --editable 'src/edrnsite.policy[dev]'"
            -   ".venv/bin/pip install --editable 'src/edrnsite.test[dev]'"

    dev-rebuild:
        desc: "Rebuild entire P5 for local development"
        summary: >
            Erases the local PostgreSQL database and media blobs, imports the latest from the JPL host,
            upgrades it to the current development schema, and optionally ingests the latest RDF.

            To disable the RDF ingest, use `task dev-rebuild rdf=false`.

            ⚠️ Warning! This erases any local database or blobs you may have!
        deps: [venv]
        silent: false
        interactive: false
        vars:
            rdf: "{{.rdf | default \"true\"}}"
        cmds:
            -   echo "⏱️ Starting in 5 seconds; doing RDF ingest is {{.rdf}}"
            -   sleep 5
            -   dropdb --force --if-exists "edrn"
            -   createdb "edrn" "P5 for the Early Detection Research Network"
            -   rsync --checksum --no-motd --recursive --delete --progress {{.jpl_ipv4}}:{{.p5_media_dir}} .
            -   touch media/.nobackup
            # We could just "ssh cat" this but I like having an extra copy of the .sql.bz2 file locally
            # in case of disaster.
            -   scp {{.jpl_ipv4}}:{{.p5_sql}} .
            -   bzip2 --decompress --stdout edrn.sql.bz2 | psql --dbname=edrn --echo-errors --quiet
            -   .venv/bin/django-admin makemigrations --settings local --pythonpath .
            -   .venv/bin/django-admin migrate --settings local --pythonpath .
            -   .venv/bin/django-admin collectstatic --settings local --pythonpath . --no-input --clear --link
            # Add additional upgrade steps here:
            -   .venv/bin/django-admin edrn_ai_search --settings local --pythonpath .
            # End of additional ugprade steps
            -   .venv/bin/django-admin edrndevreset --settings local --pythonpath .
            -   "{{.rdf}} -eq true && .venv/bin/django-admin rdfingest --settings local --pythonpath . || true"
            -   .venv/bin/django-admin clear_cache --settings local --pythonpath . --all

    manage:
        desc: "Local P5 Django admin"
        summary: >
            Run Django admin with a command=value command, defaults to shell_plus. For example, to do an RDF
            ingest, run `task manage command=rdfingest`. For command-specific arguments, pass them after `--`.
            For example: `task manage command=ping_google -- https://my.com/sitemap.xml`.
        deps: [venv]
        aliases: [shell]
        silent: true
        interactive: true
        vars:
            command: "{{.command | default \"shell_plus\"}}"
        cmds:
            -   .venv/bin/django-admin {{.command}} --settings local --pythonpath . {{.CLI_ARGS}}

    run:
        desc: "Local P5 Django server"
        summary: >
            Run the Django lightweight web server for development and serving of static files. The
            port is {{.port}} and can be overriden: `task run port=1234`.
        aliases: [default]
        deps: [venv]
        # I thought we could use "task:" here to have one task call the "manage" task, but it doesn't
        # work at all.
        silent: true
        interactive: true
        cmds:
            -   .venv/bin/django-admin runserver --settings local --pythonpath . {{.port}}

    image:
        desc: "P5 Docker image construction"
        summary: >
            Build the dependent wheels and the P5 Docker image. To skip the wheels, do
            `task image wheels=false`
        interactive: false
        vars:
            wheels: "{{.wheels | default \"true\"}}"
        cmds:
            -   "{{.wheels}} -eq true && support/build-wheels.sh || true"
            -   docker buildx build --progress plain --build-arg userid=500 --tag edrndocker/edrn-portal:latest --file docker/Dockerfile --load .

    comp-portal-shell:
        desc: "P5 Docker foreground composition interactive exec in portal"
        summary: "For when you need a handy shell inside the portal container in a running Docker composition."
        interactive: true
        env:
            CERT_CN: "dev.dev"
            EDRN_VERSION: "latest"
            LDAP_URI: "ldaps://host.docker.internal:1636"
            POSTGRES_PASSWORD: "s3cr3t"
            SECURE_COOKIES: "False"
            SIGNING_KEY: "s3cret"
        cmds:
            -   docker compose --file docker/docker-compose.yaml exec portal sh

    comp-portal-restart:
        desc: "P5 Docker foreground composition restart portal"
        summary: "In a running Docker composition for P5, this restarts the portal service only."
        interactive: false
        env:
            CERT_CN: "dev.dev"
            EDRN_VERSION: "latest"
            LDAP_URI: "ldaps://host.docker.internal:1636"
            POSTGRES_PASSWORD: "s3cr3t"
            SECURE_COOKIES: "False"
            SIGNING_KEY: "s3cret"
        cmds:
            -   docker compose --file docker/docker-compose.yaml restart portal

    compose-up:
        desc: "P5 Docker foreground composition running"
        summary: "Starts the P5 Docker composition by bringing it `up` in the foreground."
        interactive: false
        env:
            CERT_CN: "dev.dev"
            EDRN_VERSION: "latest"
            LDAP_URI: "ldaps://host.docker.internal:1636"
            POSTGRES_PASSWORD: "s3cr3t"
            SECURE_COOKIES: "False"
            SIGNING_KEY: "s3cret"
        cmds:
            -   docker compose --file docker/docker-compose.yaml up --remove-orphans 

    compose:
        desc: "P5 Docker Compose shortcut"
        summary: "Shortcut for `docker compose`"
        interactive: false
        env:
            CERT_CN: "dev.dev"
            EDRN_VERSION: "latest"
            LDAP_URI: "ldaps://host.docker.internal:1636"
            POSTGRES_PASSWORD: "s3cr3t"
            SECURE_COOKIES: "False"
            SIGNING_KEY: "s3cret"
        cmds:
            -   docker compose --file docker/docker-compose.yaml {{.CLI_ARGS}}

dotenv: ['env', '{{.HOME}}/.secrets/passwords.sh']
version: '3'

...

# -*- mode: YAML; tab-width: 4 -*-
