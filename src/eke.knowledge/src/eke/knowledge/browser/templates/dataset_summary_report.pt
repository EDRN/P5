<div metal:define-macro='datasetReports'>
<style>
.summary_report {
    width:100%;
}
path {  stroke: #fff; }
path:hover {  opacity:10.9; }
rect:hover {  fill:green; }
.axis {  font: 10px sans-serif; }

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {  display: none; }

</style>
<div id='dashboard' class='summary_report'>
</div>
<script src="https://d3js.org/d3.v3.min.js"></script>
<script>
function dashboard(id, fData){
    var datasetColor = '#7EB907';
    function segColor(c){ return {datasets:"#7EB907"}[c]; }
    
    // compute total for each state.
    fData.forEach(function(d){d.total=d.freq.datasets;});
    
    // function to handle histogram.
    function histoGram(fD){
        var hG={},    hGDim = {t: 20, r: 0, b: 20, l: 0};
        hGDim.w = 900 - hGDim.l - hGDim.r, 
        hGDim.h = 180 - hGDim.t - hGDim.b;
            
        //create svg for histogram.
        var hGsvg = d3.select(id).append("svg")
            .attr("width", hGDim.w + hGDim.l + hGDim.r)
            .attr("height", hGDim.h + hGDim.t + hGDim.b).append("g")
            .attr("transform", "translate(" + hGDim.l + "," + hGDim.t + ")");

        // create function for x-axis mapping.
        var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)
                .domain(fD.map(function(d) { console.log(d[1]); return d[0]; }));

        // Add x-axis to the histogram svg.
        hGsvg.append("g").attr("class", "x axis")
            .attr("transform", "translate(0," + hGDim.h + ")")
            .call(d3.svg.axis().scale(x).orient("bottom"));

        // Create function for y-axis map.
        var y = d3.scale.linear().range([hGDim.h, 0])
                .domain([0, d3.max(fD, function(d) { return d[1]; })]);

        // Create bars for histogram to contain rectangles and freq labels.
        var bars = hGsvg.selectAll(".bar").data(fD).enter()
                .append("g").attr("class", "bar");
        
        //create the rectangles.
        bars.append("rect")
            .attr("x", function(d) { return x(d[0]); })
            .attr("y", function(d) { return y(d[1]); })
            .attr("width", x.rangeBand())
            .attr("height", function(d) { return hGDim.h - y(d[1]); })
            .attr('fill',datasetColor);// mouseout is defined below.
            
        //Create the frequency labels above the rectangles.
        bars.append("text").text(function(d){ return d3.format(",")(d[1])})
            .attr("x", function(d) { return x(d[0])+x.rangeBand()/2; })
            .attr("y", function(d) { return y(d[1])-5; })
            .attr("text-anchor", "middle");
        
        return hG;
    }
    
    // calculate total frequency by segment for all state.
    var tF = ['datasets'].map(function(d){ 
        return {type:d, freq: d3.sum(fData.map(function(t){ return t.freq[d];}))}; 
    });    
    
    // calculate total frequency by state for all segment.
    var sF = fData.map(function(d){return [d.organ,d.total];});

    var hG = histoGram(sF); // create the histogram.
}
</script>
<script type="text/javascript" src="++resource++plone.app.jquery.js"></script>
<script type="text/javascript" src="jquery-integration.js"></script>
<script type="text/javascript" src="++resource++plone.app.jquerytools.js"></script>
<script>

document.addEventListener( 'DOMContentLoaded', function () {
    $.getJSON( "data/@@summary", function( data ) {
        var items = [];
        var datakeys = Object.keys(data);
        datakeys.sort()
        $.each( datakeys , function( key ) {
            items.push({organ: datakeys[key], freq:{datasets:data[datakeys[key]]}});
        });
        var sorted = items.sort(function(a, b) {
           return a.freq.datasets - b.freq.datasets;
        });
        console.log(sorted);
        dashboard('#dashboard', sorted);
    });
});
</script>
</div>
