# Generated by Django 4.1.1 on 2022-09-14 14:41

from django.db import migrations, models
import django.db.models.deletion
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtailmetadata.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0076_modellogentry_revision'),
        ('wagtailimages', '0024_index_image_file_hash'),
    ]

    operations = [
        migrations.CreateModel(
            name='BoilerplateSnippet',
            fields=[
                ('bp_code', models.CharField(help_text='Boilerplate ID code', max_length=80, primary_key=True, serialize=False, unique=True)),
                ('text', wagtail.fields.RichTextField(help_text='Boilerplate rich text')),
            ],
            options={
                'verbose_name': 'Boilerplate Snippet',
                'verbose_name_plural': 'Boilerplate Snippets',
            },
        ),
        migrations.CreateModel(
            name='CertificationSnippet',
            fields=[
                ('url', models.URLField(default='http://cert/location', help_text='URL to certifying body', primary_key=True, serialize=False)),
                ('label', models.CharField(default='label', help_text='What to call agency', max_length=80)),
                ('description', models.TextField(blank=True, help_text='Summary of what the certifiying agency is for')),
            ],
        ),
        migrations.CreateModel(
            name='SectionPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('body', wagtail.fields.StreamField([('title', wagtail.blocks.StructBlock([('text', wagtail.blocks.CharBlock(help_text='Title to display', max_length=100, required=True))])), ('section_cards', wagtail.blocks.StructBlock([('cards', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(help_text='Title of this Site Section Card', max_length=200, required=True)), ('style', wagtail.blocks.ChoiceBlock(choices=[('aqua', 'Aqua'), ('cerulean', 'Cerulean'), ('teal', 'Teal'), ('cyan', 'Cyan'), ('navy', 'Navy')], help_text='Background style for this card', required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Little picture to show in the corner of the card', required=False)), ('page', wagtail.blocks.PageChooserBlock(help_text='Site page to which this card links, optional', required=False)), ('description', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'hr', 'link', 'document-link'], help_text='Short introductory text', required=False)), ('links', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(help_text="Label for the link; don't use ‘here’", max_length=120, required=False)), ('internal_page', wagtail.blocks.PageChooserBlock(help_text='Page in the site to link to', required=False)), ('external_link', wagtail.blocks.URLBlock(help_text='External URL to link to', required=False)), ('view_name', wagtail.blocks.CharBlock(help_text='Name of a view to link to', max_length=32, required=False))])))])))]))], blank=True, null=True, use_json_field=True)),
                ('search_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Search image')),
            ],
            options={
                'verbose_name': 'section page',
                'verbose_name_plural': 'section pages',
            },
            bases=(wagtailmetadata.models.WagtailImageMetadataMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('body', wagtail.fields.StreamField([('title', wagtail.blocks.StructBlock([('text', wagtail.blocks.CharBlock(help_text='Title to display', max_length=100, required=True))])), ('section_cards', wagtail.blocks.StructBlock([('cards', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(help_text='Title of this Site Section Card', max_length=200, required=True)), ('style', wagtail.blocks.ChoiceBlock(choices=[('aqua', 'Aqua'), ('cerulean', 'Cerulean'), ('teal', 'Teal'), ('cyan', 'Cyan'), ('navy', 'Navy')], help_text='Background style for this card', required=False)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Little picture to show in the corner of the card', required=False)), ('page', wagtail.blocks.PageChooserBlock(help_text='Site page to which this card links, optional', required=False)), ('description', wagtail.blocks.RichTextBlock(features=['bold', 'italic', 'hr', 'link', 'document-link'], help_text='Short introductory text', required=False)), ('links', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('link_text', wagtail.blocks.CharBlock(help_text="Label for the link; don't use ‘here’", max_length=120, required=False)), ('internal_page', wagtail.blocks.PageChooserBlock(help_text='Page in the site to link to', required=False)), ('external_link', wagtail.blocks.URLBlock(help_text='External URL to link to', required=False)), ('view_name', wagtail.blocks.CharBlock(help_text='Name of a view to link to', max_length=32, required=False))])))])))])), ('carousel', wagtail.blocks.StructBlock([('media', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('label', wagtail.blocks.CharBlock(help_text='Overlaid label, if any', max_length=120, required=False)), ('caption', wagtail.blocks.CharBlock(help_text='Overlaid caption, if any', max_length=400, required=False))])))]))], blank=True, null=True, use_json_field=True)),
                ('search_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Search image')),
            ],
            options={
                'verbose_name': 'home page',
                'verbose_name_plural': 'home pages',
            },
            bases=(wagtailmetadata.models.WagtailImageMetadataMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='FlexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('body', wagtail.fields.StreamField([('rich_text', wagtail.blocks.RichTextBlock(help_text='Richly formatted text', icon='doc-full', label='Rich Text')), ('cards', wagtail.blocks.StructBlock([('cards', wagtail.blocks.ListBlock(wagtail.blocks.StructBlock([('title', wagtail.blocks.CharBlock(help_text='Title of this card, max 100 chars', max_length=100))])))]))], blank=True, null=True, use_json_field=True)),
                ('search_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Search image')),
            ],
            options={
                'verbose_name': 'web page',
                'verbose_name_plural': 'web pages',
            },
            bases=(wagtailmetadata.models.WagtailImageMetadataMixin, 'wagtailcore.page', models.Model),
        ),
    ]
