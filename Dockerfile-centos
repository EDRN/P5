# EDRN P5 - Image Building
# ========================
#
# Used by "docker image build"
#
# Basis
# -----
#
# Used to be based on Plone (Debian) 5.1.5, except that it specifies ``VOLUME /data``
# and CBIIT demands we run the internal container with username "edrn" with user ID
# 26013. Normally we would just ``adduser`` and ``chown`` except thanks to the
# ``VOLUME /data`` nothing we ``chown`` under ``/data`` takes effect and there's no
# way to undo a basis image's ``VOLUME`` (see this_). So now we have to reproduce
# every damn thing the ``plone/plone:5.1.5`` image does.
#
# BUT WAIT THERE'S MORE!
#
# The Twistlock security scanner absolutely hates Debian Linux, so we can't
# base ourselves off the python:2.7 image either, which uses Debian. Further
# tests show that Ubuntu is out too (of course); the only acceptable Linuxes
# are centos:8 and alpine:3. So we either have to install Python, Plone, and
# all our dependencies on centos:8 or use the python:2.7.17-alpine3.11 as a
# base.
#
# That's what follows below.
#
# #16: also we now use python:2.7-slim-buster for security fixes
# #16: scratch that, it's now alpine; debian gets flagged by Twistlock
# #16: even a plain debian:latest has critical+high vulnerabilities
#
# FURTHER HEADACHE: we can't run as 26013 at JPL or any place else in the world
# because our data volume runs as 500, so let's throw Docker best practices out
# the window and make two images:
#
# ``Dockerfile`` (this file)
#     Makes an image the old fashioned way (user ID 500)
# ``Dockerfile-nci``
#     Makes an image with the user ID 26013 requirement


# NCI hates Debian as well 
# But NCI also hate sqlite, which comes with python:2.7.17-alpine3.11
# 
FROM python:2.7.17-alpine3.11

ENV \
    PIP=9.0.3 \
    ZC_BUILDOUT=2.11.4 \
    SETUPTOOLS=39.1.0 \
    WHEEL=0.31.1 \
    PLONE_MAJOR=5.1 \
    PLONE_VERSION=5.1.5 \
    PLONE_MD5=8ed5ff27fab67b1b510a1ce0ee2dd655

# NCI prefers group and user ID "edrn"
RUN : &&\
    addgroup -S -g 500 edrn &&\
    adduser -S -D -h /plone -G edrn -u 500 -g 'Plone for EDRN User' edrn &&\
    mkdir -p /plone/instance /data/filestorage /data/blobstorage

COPY buildout.cfg /plone/instance/

# TODO Add --quiet to ``apk add`` â€” no, let's not; some feedback is nice
# NB: the two spaces in the ``echo`` to ``md5sum`` is vital with BusyBox-based ``md5sum``
RUN : &&\
    echo '@testing http://dl-cdn.alpinelinux.org/alpine/edge/testing' >> /etc/apk/repositories &&\
    echo '@edge http://dl-cdn.alpinelinux.org/alpine/edge/main' >> /etc/apk/repositories &&\
    apk update &&\
    : We will uninstall these later &&\
    buildDeps="gcc bzip2-dev musl-dev libjpeg-turbo-dev openjpeg-dev pcre-dev openssl-dev tiff-dev libxml2-dev libxslt-dev zlib-dev openldap-dev cyrus-sasl-dev libffi-dev" &&\
    apk add --virtual plone-build $buildDeps &&\
    : These stay &&\
    runDeps="libjpeg-turbo tiff libxml2 libxslt lynx netcat-openbsd libstdc++@edge libgcc@edge sqlite-libs@edge poppler-utils@edge rsync wv su-exec bash" &&\
    apk add $runDeps &&\
    : Get, check, and extract Plone &&\
    wget -q -O Plone.tgz https://launchpad.net/plone/$PLONE_MAJOR/$PLONE_VERSION/+download/Plone-$PLONE_VERSION-UnifiedInstaller.tgz &&\
    echo "$PLONE_MD5  Plone.tgz" | md5sum -c - &&\
    tar -xzf Plone.tgz &&\
    cp -r ./Plone-$PLONE_VERSION-UnifiedInstaller/base_skeleton/* /plone/instance/ &&\
    cp ./Plone-$PLONE_VERSION-UnifiedInstaller/buildout_templates/buildout.cfg /plone/instance/buildout-base.cfg &&\
    : Install buildout, setuptools, and pip at specific versions &&\
    pip --quiet install pip==$PIP setuptools==$SETUPTOOLS zc.buildout==$ZC_BUILDOUT wheel==$WHEEL &&\
    cd /plone/instance &&\
    buildout &&\
    ln -s /data/filestorage/ /plone/instance/var/filestorage &&\
    ln -s /data/blobstorage /plone/instance/var/blobstorage &&\
    chown -R edrn:edrn /plone /data &&\
    rm -rf /Plone* &&\
    apk del plone-build &&\
    rm -rf /plone/buildout-cache/downloads/* &&\
    : TODO: At this point we could incorporate our P5 specific stuff &&\
    :


# AT THIS POINT:
VOLUME /data
COPY docker-initialize.py docker-entrypoint.sh /
EXPOSE 8080
WORKDIR /plone/instance
HEALTHCHECK --interval=1m --timeout=5s --start-period=1m \
  CMD nc -z -w5 127.0.0.1 8080 || exit 1
ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["start"]
# let's see if we can get a working Plone


# OK DO WE HAVE A WORKING PLONE?

# Dependencies
# ------------
#
# To figure this out, first set up a throwaway Debian container and run::
#     apt-get update
#     apt-get install apt-file
#     apt-file update
# Then for a package X::
#     apt-get install X
#     apt-file list X
# And pick a sentinel file from the list. Plug that into https://pkgs.alpinelinux.org/contents
# to find out what Alpine package provides that file.
#
# Key: debian-package sentinel-file alpine-package
#
# Build Time
# ~~~~~~~~~~
#
# From Plone's Dockerfile:
# gcc                   /usr/bin/gcc            gcc
# libbz2-dev            /usr/include/bzlib.h                    bzip2-dev
# libc6-dev             /usr/include/signal.h                   musl-dev
# libjpeg62-turbo-dev   /usr/include/jerror.h                   libjpeg-turbo-dev
# libopenjp2-7-dev      /usr/include/openjpeg-2.3/openjpeg.h    openjpeg-dev
# libpcre3-dev          /usr/include/pcre.h                     pcre-dev
# libssl-dev            /usr/include/openssl/ssl.h              openssl-dev
# libtiff5-dev          "transitional package"; try tiff.h      tiff-dev
# libxml2-dev           /usr/bin/xml2-config                    libxml2-dev
# libxslt1-dev          /usr/bin/xslt-config                    libxslt-dev
# wget                  /usr/bin/wget                           wget (is this really build dep?)*
# zlib1g-dev            /usr/include/zlib.h                     zlib-dev
#
# Implicit deps:
# libffi-dev            /usr/include/x86_64-linux-gnu/ffi.h     libffi-dev
#
# ALSO: wget is BusyBox! Do we need the full wget?
# dpkg-dev?
#
# Our own additional needs for P5:
#
# libldap2-dev          /usr/include/ldap.h                     openldap-dev
# libsasl2-dev          /usr/include/sasl/sasl.h                cyrus-sasl-dev
#
# Run Time
# ~~~~~~~~
#
# gosu                  /usr/sbin/gosu                          gosu@testing
# libjpeg62             libjpeg.so                              libjpeg-turbo
# libopenjp2-7          libopenjp2.so                           openjpeg
# libtiff5              libtiff.so                              tiff
# libxml2               libxml2.so                              libxml2
# libxslt1.1            libxslt.so                              libxslt
# lynx                  /usr/bin/lynx                           lynx
# netcat (virtual)      /usr/bin/nc                             netcat-openbsd
# poppler-utils         /usr/bin/pdftohtml                      poppler-utils@edge
# rsync                 /usr/bin/rsync                          rsync
# wv                    /usr/bin/wvHtml                         wv


# RUN buildDeps="dpkg-dev gcc libbz2-dev libc6-dev libjpeg62-turbo-dev libopenjp2-7-dev libpcre3-dev libssl-dev libtiff5-dev libxml2-dev libxslt1-dev wget zlib1g-dev" \
#  && runDeps="gosu libjpeg62 libopenjp2-7 libtiff5 libxml2 libxslt1.1 lynx netcat poppler-utils rsync wv" \
#  && apt-get update \
#  && apt-get install -y --no-install-recommends $buildDeps \
#  && wget -O Plone.tgz https://launchpad.net/plone/$PLONE_MAJOR/$PLONE_VERSION/+download/Plone-$PLONE_VERSION-UnifiedInstaller.tgz \
#  && echo "$PLONE_MD5 Plone.tgz" | md5sum -c - \
#  && tar -xzf Plone.tgz \
#  && cp -rv ./Plone-$PLONE_VERSION-UnifiedInstaller/base_skeleton/* /plone/instance/ \
#  && cp -v ./Plone-$PLONE_VERSION-UnifiedInstaller/buildout_templates/buildout.cfg /plone/instance/buildout-base.cfg \
#  && pip install pip==$PIP setuptools==$SETUPTOOLS zc.buildout==$ZC_BUILDOUT wheel==$WHEEL \
#  && cd /plone/instance \
#  && buildout \
#  && ln -s /data/filestorage/ /plone/instance/var/filestorage \
#  && ln -s /data/blobstorage /plone/instance/var/blobstorage \
#  && chown -R edrn:edrn /plone /data \
#  && rm -rf /Plone* \
#  && apt-get purge -y --auto-remove $buildDeps \
#  && apt-get install -y --no-install-recommends $runDeps \
#  && rm -rf /var/lib/apt/lists/* \
#  && rm -rf /plone/buildout-cache/downloads/*

# VOLUME /data

# COPY docker-initialize.py docker-entrypoint.sh /

# EXPOSE 8080
# WORKDIR /plone/instance

# HEALTHCHECK --interval=1m --timeout=5s --start-period=1m \
#   CMD nc -z -w5 127.0.0.1 8080 || exit 1

# ENTRYPOINT ["/docker-entrypoint.sh"]
# CMD ["start"]

# # And now we resume our friendly standard Dockerfile:
# #
# # Dependecies
# # -----------
# #
# # Add additional build-time and run-time needs. The ``build-essential``
# # is the build-time. The rest are run-time. We remove ``build-essential``
# # at the end of the ``Dockerfile``.
# #
# # #16: Add backports+experimental, upgrade, and install steps for TwistLock security fixes
# RUN echo 'deb http://deb.debian.org/debian buster-backports main contrib non-free' > /etc/apt/sources.list.d/backports.list && \
#     echo 'deb http://deb.debian.org/debian bullseye main contrib' > /etc/apt/sources.list.d/bullseye.list && \
#     echo 'deb http://deb.debian.org/debian experimental main' > /etc/apt/sources.list.d/experimental.list && \
#     apt-get update && \
#     apt-get install -y --no-install-recommends libldap2-dev libsasl2-dev build-essential && \
#     apt-get -y upgrade && \
#     apt-get -t buster-backports install -y linux-libc-dev && \
#     apt-get -t bullseye install -y libcurl3-gnutls && \
#     apt-get -t experimental install -y libjpeg62-turbo-dev libjpeg-dev libturbojpeg0-dev libjpeg-turbo-progs libxml2 libxml2-dev


# # Image Filesystem
# # ----------------
# #
# # Prepare the file structure of the image with our custom Buildout config
# # named ``docker.cfg``, its inclusions in ``etc``, the custom Plone source
# # in ``src``.
# COPY --chown=edrn:edrn docker.cfg /plone/instance
# COPY --chown=edrn:edrn etc /plone/instance/etc
# COPY --chown=edrn:edrn src /plone/instance/src


# # Build
# # -----
# #
# # Build everything out by first cleaning any host-provided Python objects
# # and buildout detritus then running Buildout on the ``docker.cfg``.
# RUN find /plone/instance/src -name '*.py[co]' -exec rm -f '{}' + && \
#     pip install urllib3==1.25.7 && \
#     rm -rf /plone/instance/src/*/{var,bin,develop-eggs,parts} && \
#     rm -rf /plone/buildout-cache/eggs/urllib3-1.22* && \
#     rm -rf /plone/buildout-cache/downloads/dist/urllib3-1.22* && \
#     gosu edrn buildout -c docker.cfg

# # TOD: do we need utf-8 sys.defaultencoding workaround??


# # Cleanup
# # -------
# #
# # We can now get rid of the build-time dependencies and leave the APT system
# # in a clean state.
# RUN apt-get remove -y --purge build-essential && \
#     apt-get autoremove -y && \
#     apt-get clean -y && \
#     rm -rf /var/lib/apt/lists/*


# # For CVE-2018-21029 "fix"
# #    apt-get remove -y --allow-remove-essential libsystemd0 libudev1 libssh2-1 && \



# # Metadata
# # --------
# #
# # Note that ``org.label-schema`` is deprecated, but it's a heck of a lot
# # easier to understand.  Still, I have to wonder why they didn't just use
# # Dublin Core.
# LABEL "org.label-schema.name"="EDRN Public Portal Power Level 5"
# LABEL "org.label-schema.description"="Plone 5-based portal for the Early Detecton Research Network"
# LABEL "org.label-schema.version"="5.0.0"
# LABEL "org.label-schema.schema-version"="1.0"
# LABEL "org.label-schema.docker.cmd"="docker run --detach --publish 2345:8080 --volume ${EDRN_DATA_DIR}/filestorage:/data/filestorage --volume ${EDRN_DATA_DIR}/blobstorage:/data/blobstorage --volume ${EDRN_DATA_DIR}/log:/data/log edrn-p5"
